# Wichtig ist auch das ihr die Temporären daten in gelöscht werden und nicht.

name: HekmatMind CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 0 * * 0'  # Wöchentlicher Lauf (jeden Sonntag um Mitternacht)

env:
  CARGO_TERM_COLOR: always
  MIN_COVERAGE: 80  # Erhöht auf 80% für bessere Codequalität
  RUST_BACKTRACE: 1
  COVERAGE_DIR: ./coverage  # Einheitliches Verzeichnis für Coverage-Daten

permissions:
  contents: read
  checks: write

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable, beta]
        include:
          - os: ubuntu-latest
            rust: nightly
            experimental: true
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy
          override: true

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Run unit tests
        run: cargo test --workspace

      - name: Run doc tests
        run: cargo test --workspace --doc

      - name: Run property-based tests
        if: success() && matrix.os == 'ubuntu-latest' && matrix.rust == 'stable'
        run: |
          # Stelle sicher, dass proptest als Abhängigkeit hinzugefügt wurde
          if grep -q "proptest" Cargo.toml || grep -q "proptest" */Cargo.toml; then
            cargo test --workspace -- --ignored
          else
            echo "Keine property-based Tests gefunden. Überspringe..."
          fi

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install required tools
        run: |
          sudo apt-get update
          sudo apt-get install -y bc jq

      - name: Install cargo-tarpaulin
        run: cargo install cargo-tarpaulin

      - name: Erstelle Coverage-Verzeichnis
        run: mkdir -p ${{ env.COVERAGE_DIR }}

      - name: Run cargo-tarpaulin
        id: tarpaulin
        run: |
          RUST_BACKTRACE=1 cargo tarpaulin \
            --workspace \
            --out Xml \
            --out Json \
            --output-dir ${{ env.COVERAGE_DIR }} \
            --exclude-files "/**/benches/**" \
            --exclude-files "**/target/**" \
            --exclude-files "**/.git/**" \
            --line \
            --all-features \
            --include-tests \
            --count \
            --fail-under ${{ env.MIN_COVERAGE }}

      - name: Analysiere Coverage
        id: coverage_analysis
        if: always()
        run: |
          # Suche nach Coverage-Dateien
          JSON_FILE="${{ env.COVERAGE_DIR }}/tarpaulin-report.json"
          XML_FILE="${{ env.COVERAGE_DIR }}/cobertura.xml"

          if [ -f "$JSON_FILE" ]; then
            echo "has_json=true" >> $GITHUB_OUTPUT
            echo "json_path=$JSON_FILE" >> $GITHUB_OUTPUT

            # Berechne Coverage aus den tatsächlichen Daten
            COVERED=$(jq -r '.files | map(.covered) | add' "$JSON_FILE")
            TOTAL=$(jq -r '.files | map(.coverable) | add' "$JSON_FILE")
            COVERAGE=$(echo "scale=4; $COVERED / $TOTAL * 100" | bc)

            FORMATTED_COVERAGE=$(printf "%.2f" "$COVERAGE")
            echo "coverage=$FORMATTED_COVERAGE" >> $GITHUB_OUTPUT

            echo "Gemessene Coverage: $FORMATTED_COVERAGE%"
            echo "Minimum erforderliche Coverage: ${{ env.MIN_COVERAGE }}%"

            # Prüfen, ob die minimale Coverage erreicht wurde
            if (( $(echo "$COVERAGE < ${{ env.MIN_COVERAGE }}" | bc -l) )); then
              echo "::error::Test coverage ($FORMATTED_COVERAGE%) ist unter der minimalen Anforderung (${{ env.MIN_COVERAGE }}%)"
              exit 1
            else
              echo "::notice::Coverage von $FORMATTED_COVERAGE% erfüllt die Mindestanforderung von ${{ env.MIN_COVERAGE }}%"
            fi
          fi

          if [ -f "$XML_FILE" ]; then
            echo "has_xml=true" >> $GITHUB_OUTPUT
            echo "xml_path=$XML_FILE" >> $GITHUB_OUTPUT
          fi

      # Upload Testabdeckung zu Codecov für Visualisierung und Tracking
      - name: Upload coverage to Codecov
        if: steps.coverage_analysis.outputs.has_xml == 'true'
        uses: codecov/codecov-action@v4
        with:
          file: ${{ steps.coverage_analysis.outputs.xml_path }}
          fail_ci_if_error: false

      - name: Archive code coverage results
        if: always() && (steps.tarpaulin.conclusion != 'skipped')
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: ${{ env.COVERAGE_DIR }}

      # Bereinige temporäre Dateien
      - name: Cleanup temporary files
        if: always()
        run: |
          # Bereinige profraw-Dateien, die nicht für Berichte benötigt werden
          find . -name "*.profraw" -type f -delete || true

          # Bereinige tarpaulin-Verzeichnisse außerhalb des Coverage-Verzeichnisses
          find . -path "${{ env.COVERAGE_DIR }}" -prune -o -name "tarpaulin" -type d -exec rm -rf {} \; 2>/dev/null || true

          echo "Temporäre Dateien wurden bereinigt"

  lint:
    name: Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          override: true

      - name: Check code formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --workspace --all-targets --all-features -- -D warnings

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit

  documentation:
    name: Dokumentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rust-docs
          override: true

      - name: Prüfe Dokumentation
        run: cargo doc --no-deps --document-private-items --workspace

      - name: Prüfe fehlende Dokumentation
        run: |
          # Prüfe auf fehlende Dokumentation bei öffentlichen APIs
          RUSTDOCFLAGS="-D missing_docs" cargo doc --no-deps 2>&1 | tee doc_warnings.txt
          if grep -q "missing documentation" doc_warnings.txt; then
            echo "::warning::Fehlende Dokumentation in öffentlichen APIs gefunden"
            grep "missing documentation" doc_warnings.txt
            # Nicht fehlschlagen lassen, nur warnen
          fi

  dependency-check:
    name: Abhängigkeitsprüfung
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Cache cargo-outdated
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/cargo-outdated
          key: ${{ runner.os }}-cargo-outdated

      - name: Install cargo-outdated
        run: |
          if ! command -v cargo-outdated &> /dev/null; then
            echo "Installiere cargo-outdated..."
            cargo install cargo-outdated
          else
            echo "cargo-outdated ist bereits installiert"
          fi

      - name: Prüfe veraltete Abhängigkeiten
        run: |
          echo "::group::Abhängigkeitsprüfung"
          # Führe cargo-outdated mit detailliertem Bericht aus
          echo "Prüfe auf veraltete Abhängigkeiten..."
          OUTDATED=$(cargo outdated -R --format json)

          # Extrahiere und formatiere die Ergebnisse
          if [ "$(echo "$OUTDATED" | jq '.dependencies | length')" -gt 0 ]; then
            echo "::warning::Veraltete Abhängigkeiten gefunden"
            echo "$OUTDATED" | jq -r '.dependencies[] | "- \(.name): \(.project) -> \(.latest) (\(.kind))"'
            echo "Anzahl veralteter Abhängigkeiten: $(echo "$OUTDATED" | jq '.dependencies | length')"
          else
            echo "✅ Alle Abhängigkeiten sind aktuell"
          fi
          echo "::endgroup::"
          # Nur informativ, nicht fehlschlagen lassen
          exit 0
